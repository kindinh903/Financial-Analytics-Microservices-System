spring:
  application:
    name: api-gateway
  data:
    redis:
      host: redis
      port: 6379
  cloud:
    gateway:
      routes:
        - id: user-health
          uri: http://user-service:8088
          predicates:
            - Path=/api/users/health
          filters:
            - RewritePath=/api/users/health, /health
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                redis-rate-limiter.requestedTokens: 1
                key-resolver: '#{@ipKeyResolver}'
        - id: auth-health
          uri: http://auth-service:8087
          predicates:
            - Path=/api/auth/health
          filters:
            - RewritePath=/api/auth/health, /health
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                redis-rate-limiter.requestedTokens: 1
                key-resolver: '#{@ipKeyResolver}'
        - id: price-health
          uri: http://price-service:8081
          predicates:
            - Path=/api/price/health
          filters:
            - RewritePath=/api/price/health, /health
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                redis-rate-limiter.requestedTokens: 1
                key-resolver: '#{@ipKeyResolver}'
        - id: user-service
          uri: http://user-service:8088
          predicates:
            - Path=/api/users/**
          filters:
            - RewritePath=/api/(?<segment>.*), /api/${segment}
            - name: AuthenticationFilter
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                redis-rate-limiter.requestedTokens: 1
                key-resolver: '#{@ipKeyResolver}'
        - id: price-service
          uri: http://price-service:8081
          predicates:
            - Path=/api/price/**
          filters:
            - RewritePath=/api/(?<segment>.*), /api/${segment}
            - name: AuthenticationFilter
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                redis-rate-limiter.requestedTokens: 1
                key-resolver: '#{@ipKeyResolver}'
        - id: auth-service
          uri: http://auth-service:8087
          predicates:
            - Path=/api/auth/**
          filters:
            - RewritePath=/api/(?<segment>.*), /api/${segment}
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                redis-rate-limiter.requestedTokens: 1
                key-resolver: '#{@ipKeyResolver}'
management:
  endpoints:
    web:
      exposure:
        include: health,info,gateway
  endpoint:
    health:
      show-details: always
logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    org.springframework.web.reactive: DEBUG
    reactor.netty: DEBUG
    org.springframework.web.server.adapter.HttpWebHandlerAdapter: DEBUG
jwt:
  key: your-super-secret-jwt-key-here-make-it-long-and-secure
  enabled: true