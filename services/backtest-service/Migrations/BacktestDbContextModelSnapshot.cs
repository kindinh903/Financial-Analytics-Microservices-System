// <auto-generated />
using System;
using BacktestService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BacktestService.Migrations
{
    [DbContext(typeof(BacktestDbContext))]
    partial class BacktestDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BacktestService.Models.BacktestResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Accuracy")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("F1Score")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("FinalBalance")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("InitialBalance")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("Interval")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("LosingTrades")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxDrawdown")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("Precision")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("Recall")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("SharpeRatio")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("TotalReturn")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("TotalReturnPercent")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("TotalTrades")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("WinRate")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("WinningTrades")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BacktestResults");
                });

            modelBuilder.Entity("BacktestService.Models.PerformancePoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BacktestResultId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("Drawdown")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("Equity")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BacktestResultId");

                    b.ToTable("PerformancePoints");
                });

            modelBuilder.Entity("BacktestService.Models.Trade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BacktestResultId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18,8)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<decimal>("PnL")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("BacktestResultId");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("BacktestService.Models.PerformancePoint", b =>
                {
                    b.HasOne("BacktestService.Models.BacktestResult", null)
                        .WithMany("PerformanceHistory")
                        .HasForeignKey("BacktestResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BacktestService.Models.Trade", b =>
                {
                    b.HasOne("BacktestService.Models.BacktestResult", null)
                        .WithMany("Trades")
                        .HasForeignKey("BacktestResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BacktestService.Models.BacktestResult", b =>
                {
                    b.Navigation("PerformanceHistory");

                    b.Navigation("Trades");
                });
#pragma warning restore 612, 618
        }
    }
}
