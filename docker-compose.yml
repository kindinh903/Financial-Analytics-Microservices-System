version: '3.9'

services:
  auth-service:
    build: ./services/auth-service
    container_name: auth-service
    expose: ["8087"]         
    environment:
      - ASPNETCORE_URLS=http://+:8087
      - ConnectionStrings__DefaultConnection=Host=auth-db;Port=5432;Database=mydb;Username=admin;Password=secret
      - Jwt__Key=daiduongmenhmongoihoiemodauhuhuhihihehe_2025_super_secret_key_for_jwt_signing_256_bits_minimum_required
      - Jwt__Issuer=http://auth-service:8087
      - Jwt__Audience=http://auth-service:8087
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - ConnectionStrings__Redis=redis:6379,abortConnect=false
    depends_on:
      - mongodb
      - redis
      - auth-db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/health"]
      interval: 10s
      timeout: 3s
      retries: 3

  auth-db:
    image: postgres:15
    container_name: my-postgres
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: mydb
    ports:
      - "5432:5432"
    volumes:
      - auth-db-data:/var/lib/postgresql/data

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong@Passw0rd
    ports:
      - "1433:1433"
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -C -S localhost -U sa -P $${SA_PASSWORD} -Q 'SELECT 1' || exit 1"]
      interval: 10s
      timeout: 5s
    restart: always

  # notification-service:
  #   build: ./services/notification-service
  #   container_name: notification-service
  #   expose: ["8086"]         
  #   environment:
  #     - KAFKA_BROKER=kafka:9092
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #   depends_on:
  #     - kafka
  #     - redis
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
  #     interval: 10s
  #     timeout: 3s
  #     retries: 3

  price-service:
    build: ./services/price-service
    container_name: price-service
    expose: ["8081"]         
    environment:
      - KAFKA_BROKER=kafka:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - INFLUX_URL=http://influxdb:8086
      - INFLUX_TOKEN=my-secret-token
      - INFLUX_ORG=Financial-Analytics
      - INFLUX_BUCKET=PriceServiceDB
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_ENABLED=true
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
      influxdb:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 10s
      timeout: 3s
      retries: 3

  # news-service:
  #   build: ./services/news-service
  #   container_name: news-service
  #   expose: ["8083"]        # Changed from 8082 to avoid conflict
  #   environment:
  #     - KAFKA_BROKER=kafka:9092
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #   depends_on:
  #     - kafka
  #     - redis
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
  #     interval: 10s
  #     timeout: 3s
  #     retries: 3

  backtest-service:
    build: ./services/backtest-service
    container_name: backtest-service
    expose: ["8080"]
    environment:
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=BacktestDB;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=true;
      - Services__AiService__BaseUrl=http://ai-service:8084
      - Services__PriceService__BaseUrl=http://price-service:8081
    depends_on:
      - sqlserver
      # - ai-predict-service
      - price-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 3s
      retries: 3



  ai-predict-service:          # đổi tên service ở đây
    build: ./services/ai-predict-service   # đường dẫn mới tới folder
    container_name: ai-predict-service     # đặt lại tên container
    expose: ["8084"]         
    ports:
      - "8084:8084"
    environment:
      - KAFKA_BROKER=kafka:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=models
    depends_on:
      - kafka
      - redis
      - minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3


  user-service:
    build: ./services/user-service
    container_name: user-service
    expose: ["8088"]        
    environment:
      - PORT=8088
      - MONGODB_URI=mongodb://mongodb:27017/user_management
      - JWT_SECRET=your-super-secret-jwt-key-here-make-it-long-and-secure
      - KAFKA_BROKER=kafka:29092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - kafka
      - redis
      - mongodb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 10s
      timeout: 3s
      retries: 3

  gateway:
    build: ./gateway
    container_name: gateway
    ports:
      - "8080:8080"
    environment:
      - KAFKA_BROKER=kafka:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
    depends_on:
      - kafka
      - redis
      - auth-service
      - price-service
      - user-service
      - crawler
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 3s
      retries: 3

  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile.dev
  #   container_name: frontend
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - CHOKIDAR_USEPOLLING=true
  #     - WATCHPACK_POLLING=true
  #   volumes:
  #     - ./frontend:/app         # Mount source code
  #     # XÓA dòng /app/node_modules để không ghi đè
  #   depends_on:
  #     - gateway
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:3000/"]
  #     interval: 10s
  #     timeout: 3s
  #     retries: 3

  mongodb:
    image: mongo:7.0
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: financial_analytics
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 3s
      retries: 3

  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Kafka + Zookeeper (imported from infra/kafka/docker-compose.kafka.yml)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:29092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 10
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      # # Prevent Cluster ID mismatch by using a fixed cluster ID
      # KAFKA_CLUSTER_ID: "financial-analytics-cluster-2025"
      # # Additional settings to prevent startup issues
      # KAFKA_LOG_RETENTION_HOURS: 24
      # KAFKA_LOG_SEGMENT_BYTES: 1073741824
      # KAFKA_LOG_CLEANUP_POLICY: delete
    volumes:
      - kafka-data:/var/lib/kafka/data
    #   - ./kafka-startup.sh:/kafka-startup.sh:ro
    # command: ["/bin/bash", "/kafka-startup.sh"]

  influxdb:
    image: influxdb:2.7
    container_name: influxdb
    ports:
      - "9090:8086"
    volumes:
      - ./influxdb:/var/lib/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=adminPassword
      - DOCKER_INFLUXDB_INIT_ORG=Financial-Analytics
      - DOCKER_INFLUXDB_INIT_BUCKET=PriceServiceDB
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=my-secret-token

    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8086/health || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 3

  crawler:
    build: ./crawler
    container_name: crawler
    ports:
      - "8000:8000"
    environment:
      - BINANCE_API_KEY=${BINANCE_API_KEY:-}
      - BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY:-}
      - NEWS_API_KEY=${NEWS_API_KEY:-}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    volumes:
      - ./crawler/data:/app/data
    depends_on:
      - redis
      - kafka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data

volumes:
  mongodb_data:
  kafka-data:
  auth-db-data:
  minio_data:



  